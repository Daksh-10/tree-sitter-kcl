================================================================================
binary expression
================================================================================

1 ** 2 + 2 * 3

--------------------------------------------------------------------------------

(module
  (binary_operator
    (binary_operator
      (integer)
      (integer))
    (binary_operator
      (integer)
      (integer))))

================================================================================
unary expression
================================================================================

~1

--------------------------------------------------------------------------------

(module
  (unary_operator
    (integer)))

================================================================================
slice expression
================================================================================

"abc"[1:2]

--------------------------------------------------------------------------------

(module
  (subscript
    (string
      (string_start)
      (string_content)
      (string_end))
    (slice
      (integer)
      (integer))))

================================================================================
conditional expression
================================================================================

x = True if enabled else False

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (conditional_expression
      (true)
      (identifier)
      (false))))

================================================================================
function invocation
================================================================================

print("hello world", end="")

--------------------------------------------------------------------------------

(module
  (call
    (identifier)
    (argument_list
      (string
        (string_start)
        (string_content)
        (string_end))
      (keyword_argument
        (identifier)
        (string
          (string_start)
          (string_end))))))

================================================================================
Comprehensions
================================================================================

[x * x for x in range(5)] 

--------------------------------------------------------------------------------

(module
      (list_comprehension
        (binary_operator
          (identifier)
          (identifier))
        (for_in_clause
          (identifier)
          (call
            (identifier)
            (argument_list
              (integer))))))

================================================================================
selector expression
================================================================================

myDict = {key = "value"}
result = myDict.key

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (dictionary
          (pair
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end)))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
          (identifier)
          (identifier))))

================================================================================
selector expression with ? operator
================================================================================

data = {key = "value"}
a = data?.key     
b = data?.name

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (dictionary
          (pair
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end)))))
      (assignment
        (dotted_name
          (identifier))
        (optional_attribute
          (identifier)
          (identifier)))
      (assignment
        (dotted_name
          (identifier))
        (optional_attribute
          (identifier)
          (identifier))))

================================================================================
attribute expression
================================================================================

schema Person:
  name: str

person = Person {name: "Alice"}
name1 = person.name

--------------------------------------------------------------------------------

(module
  (schema_statement
        (identifier)
        (ERROR
          (dotted_name
            (identifier))
          (type
            (basic_type)))
        (block))
      (assignment
        (dotted_name
          (identifier))
        (schema_expr
          (dotted_name
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (ERROR
        (dotted_name
          (identifier))
        (dotted_name
        (identifier)
        (identifier))))

================================================================================
optional attribute expression
================================================================================

schema Person:
  name: str

person = Person {name: "Alice"}
name2 = person?.name

--------------------------------------------------------------------------------

(module
      (schema_statement
        (identifier)
        (ERROR
          (dotted_name
            (identifier))
          (type
            (basic_type)))
        (block))
      (assignment
        (dotted_name
          (identifier))
        (schema_expr
          (dotted_name
            (identifier))
          (dictionary
            (pair
              (identifier)
              (string
                (string_start)
                (string_content)
                (string_end))))))
      (assignment
        (dotted_name
          (identifier))
        (optional_attribute
          (identifier)
            (identifier))))

================================================================================
optional item expression
================================================================================

datalist = [[1], 2, 3]
item = datalist?[0]?

--------------------------------------------------------------------------------

(module
      (assignment
        (dotted_name
          (identifier))
        (list
          (list
            (integer))
          (integer)
          (integer)))
      (ERROR
        (assignment
          (dotted_name
            (identifier))
          (optional_item
            (identifier)
            (integer)))
        (UNEXPECTED '\n')))

================================================================================
quantifier all expression
================================================================================

all x in [1, 2, 3, 4] { x > 0 }

--------------------------------------------------------------------------------

(module
  (ERROR
    (quant_op))
  (comparison_operator
    (identifier)
    (list
      (integer)
      (integer)
      (integer)
      (integer)))
  (MISSING _newline)
  (dictionary
    (ERROR
      (comparison_operator
        (identifier)
        (integer)))))

================================================================================
quantifier any expression
================================================================================

any x in [1, 2, 3, 4] { x == 2 }

--------------------------------------------------------------------------------

(module
  (ERROR
    (quant_op))
  (comparison_operator
    (identifier)
    (list
      (integer)
      (integer)
      (integer)
      (integer)))
  (MISSING _newline)
  (dictionary
    (ERROR
      (comparison_operator
        (identifier)
        (integer)))))

================================================================================
quantifier map expression
================================================================================

b = map k, v in {a = "foo", b = "bar"} { v } 

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (ERROR
      (quant_op)
      (identifier))
    (comparison_operator
      (identifier)
      (dictionary
        (pair
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end)))
        (pair
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end))))))
  (MISSING _newline)
  (dictionary
    (ERROR
      (identifier))))

================================================================================
quantifier filter expression
================================================================================

d = filter _, v in {a = "foo", b = "bar"} {v == "foo"}

--------------------------------------------------------------------------------

(module
  (assignment
    (dotted_name
      (identifier))
    (ERROR
      (quant_op)
      (identifier))
      (comparison_operator
      (identifier)
      (dictionary
        (pair
          (identifier)
          (string
            (string_start)
            (string_content)
            (string_end)))
        (pair
          (identifier)
          (string
            (string_start)
            (string_content)
              (string_end))))))
        (MISSING _newline)
        (dictionary
        (ERROR
          (comparison_operator
            (identifier)
            (string
              (string_start)
              (string_content)
              (string_end))))))